#!/usr/bin/env python3
import json
import os
import sys
import argparse
from lib.parser import parseConfigFile, parseNimbusAPI
from lib.telemetry import TelemetryClient
from lib.analysis import FullDataAnalyzer
from lib.report import ReportGenerator

def parseArguments():
  parser = argparse.ArgumentParser(description='Process telemetry performance report.')
  parser.add_argument('--config', type=str, required=True, help="Input JSON config file.")
  parser.add_argument('--dataDir', type=str, default="data", help="Directory to save data to.")
  parser.add_argument('--reportDir', type=str, default="reports", help="Directory to save results to.")
  parser.add_argument('--skip-cache', action=argparse.BooleanOptionalAction,
                      default=False, help="Ignore any cached files on disk, and regenerate them.")
  parser.add_argument('--html-report', action=argparse.BooleanOptionalAction,
                      default=True, help="Generate html report.")
  args = parser.parse_args()
  return args

def setupDirs(slug, dataDir, reportDir, generate_report):
  if not os.path.isdir(dataDir):
    os.mkdir(dataDir)
  if not os.path.isdir(os.path.join(dataDir,slug)):
    os.mkdir(os.path.join(dataDir,slug))
  if generate_report:
    if not os.path.isdir(reportDir):
      os.mkdir(reportDir)

def getResultsForBranch(client, config, analyzer, branch):
  if config['strategy'] == 'full':
    df = client.getEventData_Full(config, branch)
    return analyzer.processPageLoadEventData(df, branch)
  elif config['strategy'] == 'incremental':
    datafiles = client.getEventData_Incremental(config, branch)
    print("Incremental strategy is unsupported for now.")
    sys.exit(1)
  else:
    print("Unknown strategy: ", config['strategy'])
    sys.exit(1)
  return results

def getResultsForExperiment(dataDir, config, skipCache):
  client = TelemetryClient(dataDir, skipCache)
  analyzer = FullDataAnalyzer(config)

  results = {}
  for branch in config['branches']:
    results[branch] = getResultsForBranch(client, config, analyzer, branch)
  return results

def checkForLocalResults(resultsFile):
  if os.path.isfile(resultsFile):
    with open(resultsFile, 'r') as f:
      results = json.load(f)
      return results
  return None

########### Start Program Here ###########
if __name__ == "__main__":
  args = parseArguments()
  print(args)

  # Parse config file.
  print("Loading config file: ", args.config)
  config = parseConfigFile(args.config)
  slug = config['slug']

  # Setup local dirs
  print("Setting up local directories.")
  setupDirs(slug, args.dataDir, args.reportDir, args.html_report)
  dataDir=os.path.join(args.dataDir, slug)
  reportDir=args.reportDir
  skipCache=args.skip_cache

  # Check for local results first.
  resultsFile= os.path.join(dataDir, f"{slug}-results.json")
  if skipCache:
    results = None
  else:
    results = checkForLocalResults(resultsFile)

  # If results not found, generate them.
  if results is None:
    # Parse Nimbus API.
    api = parseNimbusAPI(dataDir, slug, skipCache)
    config = config | api
    print("Using Config:")
    configStr = json.dumps(config, indent=2)
    print(configStr)

    # Get statistical results
    results = getResultsForExperiment(dataDir, config, skipCache)
    results = results | config
    results['input'] = config

    # Save results to disk.
    print("---------------------------------")
    print(f"Writing results to {resultsFile}")
    with open(resultsFile, 'w') as f:
      json.dump(results, f, indent=2)
  else:
    print("---------------------------------")
    print(f"Found local results in {resultsFile}")

  if args.html_report:
    reportFile = os.path.join(reportDir, f"{slug}.html")
    print(f"Generating html report in {reportFile}")

    gen = ReportGenerator(results)
    report = gen.createHTMLReport()
    with open(reportFile, "w") as f:
      f.write(report)

